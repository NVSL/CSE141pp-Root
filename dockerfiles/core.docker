##stevenjswanson/scipy-notebook
FROM jupyter/scipy-notebook:x86_64-2023-02-17
#:dc9744740e12 
#FROM ubuntu 
USER root
# this turns off some stupid prompting from apt-get install
ARG DEBIAN_FRONTEND=noninteractive


# Put us in the pacific time zone
ENV TZ=America/Los_Angeles

RUN ln -snf /usr/share/zoneinfo/$TZ /etc/localtime && echo $TZ > /etc/timezone
RUN mkdir /cse142L

ENV IN_DOCKER yes
ARG ARG_THIS_DOCKER_IMAGE
ENV THIS_DOCKER_IMAGE ${ARG_THIS_DOCKER_IMAGE}
ARG ARG_THIS_DOCKER_IMAGE_UUID
ENV THIS_DOCKER_IMAGE_UUID $ARG_THIS_DOCKER_IMAGE_UUID

# the base image puts /opt/conda at the beginning of PATH.  Here we give our version of python priority.
ENV PATH=/usr/bin:/usr/local/bin:$PATH

#####  Basics

RUN apt-get update --fix-missing; apt-get update
RUN apt-get install -y less git emacs gcc make g++ gdb  vim  curl  build-essential docker.io man man-db unzip zip cmake  software-properties-common curl git  libhdf5-dev uuid-runtime  openssh-client time  default-jdk wkhtmltopdf libqt5gui5  && apt-get clean -y  #gcc-8 g++-8

# source of this magic: https://askubuntu.com/a/1163268
RUN strip --remove-section=.note.ABI-tag /usr/lib64/libQt5Core.so.5


##### Python
RUN add-apt-repository ppa:deadsnakes/ppa; apt-get update  # for python3.9
RUN apt-get install -y python3.9 python3-pip python3.9-venv python3.9-dev && apt-get clean -y
#   RUN curl https://bootstrap.pypa.io/get-pip.py -o /tmp/get-pip.py; python3.9 /tmp/get-pip.py
RUN update-alternatives --install /usr/bin/python python /usr/bin/python3.9 10
RUN update-alternatives --install /usr/bin/python3 python /usr/bin/python3.9 10
RUN pip3 install --upgrade pip 
RUN pip3 install --upgrade setuptools

#gcc-7 g++-7 gcc-9 g++-9 # g++9 has a bug we hit.


##### Google Cloud

# https://cloud.google.com/sdk/docs/install#deb
RUN echo "deb [signed-by=/usr/share/keyrings/cloud.google.gpg] http://packages.cloud.google.com/apt cloud-sdk main" | tee -a /etc/apt/sources.list.d/google-cloud-sdk.list && curl https://packages.cloud.google.com/apt/doc/apt-key.gpg | apt-key --keyring /usr/share/keyrings/cloud.google.gpg  add - && apt-get update -y && apt-get install google-cloud-sdk -y && apt-get clean -y

##### Development

RUN apt-get install -y sysfsutils cpufrequtils numactl lshw dmidecode build-essential acpid  lm-sensors msr-tools libc6-dev-i386 libboost-math-dev libboost-dev libboost-program-options-dev gfortran clang graphviz libjpeg-dev libpng-dev golang-go groff pandoc  libpcre3-dev linux-tools-5.15.0-91-generic linux-cloud-tools-5.15.0-91-generic #libomp-dev 
RUN apt-get install -y linux-tools-generic linux-cloud-tools-generic && apt-get clean -y


##### Intel's MLC tool

# https://software.intel.com/content/www/us/en/develop/articles/intelr-memory-latency-checker.html
RUN curl https://downloadmirror.intel.com/736634/mlc_v3.9a.tgz -o /tmp/mlc_v3.9a.tgz && (cd /tmp; tar xvf mlc_v3.9a.tgz; ls; cp Linux/mlc /usr/local/bin/)
         

##### lmbench

#http://lmbench.sourceforge.net/
RUN curl -L  'https://downloads.sourceforge.net/project/lmbench/OldFiles/lmbench-3.0-a4.tgz?ts=gAAAAABhWpnhZ3EiIiP_1RcQ-QbBWRNwTIA-Z-a8QHpGOW7QvtlleWW71MNQMXoVOR4hM7hreBXF1eplWCFq0b2jm9YIRbeV5g%3D%3D&r=https%3A%2F%2Fsourceforge.net%2Fprojects%2Flmbench%2Ffiles%2FOldFiles%2Flmbench-3.0-a4.tgz%2Fdownload' -o /tmp/lmbench-3.0-a4.tgz && (cd /tmp; tar xzf lmbench-3.0-a4.tgz; cd lmbench-3.0-a4; make; cp bin/*/* /usr/local/bin/; mkdir -p /usr/local/man/man8; cp doc/*.8 /usr/local/man/man8/)

##### Google test

RUN (cd /tmp; git clone https://github.com/google/googletest.git && cd googletest && cmake CMakeLists.txt; make install)

##### Slow-building libraries we use

#RUN curl http://icl.utk.edu/projects/papi/downloads/papi-5.7.0.tar.gz -o papi-5.7.0.tar.gz && tar xzf papi-5.7.0.tar.gz && (cd papi-5.7.0/src; ./configure --with-components=rapl; make -j4 ; make install ) &&  rm -rf papi-5.7.0 papi-5.7.0.tar.gz

RUN curl -L https://github.com/radareorg/radare2/releases/download/5.3.1/radare2-dev_5.3.1_amd64.deb -o /tmp/radare2-dev_5.3.1_amd64.deb
RUN curl -L https://github.com/radareorg/radare2/releases/download/5.3.1/radare2_5.3.1_amd64.deb -o /tmp/radare2_5.3.1_amd64.deb
RUN apt install /tmp/radare2_5.3.1_amd64.deb  /tmp/radare2-dev_5.3.1_amd64.deb


#### PCM

#RUN (cd /tmp; git clone https://github.com/opcm/pcm.git; cd pcm; make; make install)	
 
WORKDIR /tmp
USER root

# Update requirements.txt occasionally with pip --freeze so most of the stuff we need is already load.  Therefore rebuilding the derived images much faster.
# This doesn't work when we base things off the custom-built scipy notebook
#COPY requirements.txt ./
#RUN mkdir /home/jovyan/.cache/pip


#RUN  pip install -r requirements.txt
WORKDIR /cse142L

